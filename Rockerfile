{{ $commit := (or .Env.GIT_COMMIT "") }}
{{ $branch := (or .Env.GIT_BRANCH "none") }}
{{ $version:= (or .Version "local") }}

FROM golang:1.8.3-alpine

# Golang build cache
MOUNT /go/pkg/linux_amd64 /usr/local/go/pkg/linux_amd64

ADD . /go/src/github.com/grammarly/rocker
WORKDIR /go/src/github.com/grammarly/rocker

ENV CGO_ENABLED=0 GOOS=linux GOARCH=amd64 GO15VENDOREXPERIMENT=1

RUN go install \
    -a -v -installsuffix cgo \
    -ldflags "-X main.Version={{$version}} -X main.GitCommit={{$commit}} -X main.GitBranch={{$branch}} -X main.BuildTime=$(TZ=GMT date '+%Y-%m-%d_%H:%M_GMT')"

{{ if .test }}
    MOUNT /var/run/docker.sock:/var/run/docker.sock
    MOUNT ~/.docker:/root/.docker
    RUN apk --update add make git bash docker

    {{ if .TestArgs }}
        ENV TESTARGS="{{ .TestArgs }}"
    {{ end }}

    ATTACH ["bash"]
    RUN make test
    RUN make test_integration
{{ end }}

EXPORT /go/bin/rocker

#========
FROM alpine:3.8

RUN apk --update add git bash

RUN set -ex; \
	apk add --update --no-cache --virtual .fetch-deps curl tar ; \
	if ! curl -fL -o /docker.tgz "https://get.docker.com/builds/Linux/x86_64/docker-1.9.1.tgz"; then \
		echo >&2 "error: failed to download 'docker-18.06.0-ce' from 'stable' for 'x86_64'"; \
		exit 1; \
	fi; \
	\
	tar --extract --file /docker.tgz; \
	rm /docker.tgz; \
	apk del .fetch-deps;

RUN mkdir -p /opt/rocker/bin

IMPORT rocker /opt/rocker/bin

VOLUME ["/opt/rocker/bin"]

WORKDIR /context

ENV PATH=/opt/rocker/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

CMD ["/opt/rocker/bin/rocker"]

PUSH dockerhub.grammarly.io/rocker:{{ $branch }}

{{ if and (ne $version "local") (eq $branch "master") }}
    PUSH dockerhub.grammarly.io/rocker:{{ $version }}
{{ end }}

